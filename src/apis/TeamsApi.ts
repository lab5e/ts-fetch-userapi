/* tslint:disable */
/* eslint-disable */
/**
 * The User API
 * API to manage teams, members and tokens
 *
 * The version of the OpenAPI document: 1.3.4 breezy-leafy
 * Contact: dev@lab5e.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AcceptInviteRequest,
    AcceptInviteRequestFromJSON,
    AcceptInviteRequestToJSON,
    Invite,
    InviteFromJSON,
    InviteToJSON,
    InviteList,
    InviteListFromJSON,
    InviteListToJSON,
    InviteRequest,
    InviteRequestFromJSON,
    InviteRequestToJSON,
    Member,
    MemberFromJSON,
    MemberToJSON,
    MemberList,
    MemberListFromJSON,
    MemberListToJSON,
    RpcStatus,
    RpcStatusFromJSON,
    RpcStatusToJSON,
    Team,
    TeamFromJSON,
    TeamToJSON,
    TeamList,
    TeamListFromJSON,
    TeamListToJSON,
} from '../models';

export interface UserAcceptInviteRequest {
    body: AcceptInviteRequest;
}

export interface UserCreateTeamRequest {
    body: Team;
}

export interface UserDeleteInviteRequest {
    teamId: string;
    code: string;
}

export interface UserDeleteMemberRequest {
    teamId: string;
    userId: string;
}

export interface UserDeleteTeamRequest {
    teamId: string;
}

export interface UserGenerateInviteRequest {
    teamId: string;
    body: InviteRequest;
}

export interface UserListInvitesRequest {
    teamId: string;
}

export interface UserRetrieveInviteRequest {
    teamId: string;
    code: string;
}

export interface UserRetrieveMemberRequest {
    teamId: string;
    userId: string;
}

export interface UserRetrieveTeamRequest {
    teamId: string;
}

export interface UserRetrieveTeamMembersRequest {
    teamId: string;
}

export interface UserUpdateMemberRequest {
    teamId: string;
    userId: string;
    body: Member;
}

export interface UserUpdateTeamRequest {
    teamId: string;
    body: Team;
}

/**
 * 
 */
export class TeamsApi extends runtime.BaseAPI {

    /**
     * Accept an invite from another user. This will add the currently logged in user to the team as a regular memeber. When the invite is accepted it is removed from the team\'s invites and cannot be reused.
     * Accept invite
     */
    async userAcceptInviteRaw(requestParameters: UserAcceptInviteRequest): Promise<runtime.ApiResponse<Team>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling userAcceptInvite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/user/teams/accept`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AcceptInviteRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamFromJSON(jsonValue));
    }

    /**
     * Accept an invite from another user. This will add the currently logged in user to the team as a regular memeber. When the invite is accepted it is removed from the team\'s invites and cannot be reused.
     * Accept invite
     */
    async userAcceptInvite(requestParameters: UserAcceptInviteRequest): Promise<Team> {
        const response = await this.userAcceptInviteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create team
     */
    async userCreateTeamRaw(requestParameters: UserCreateTeamRequest): Promise<runtime.ApiResponse<Team>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling userCreateTeam.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/user/teams`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TeamToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamFromJSON(jsonValue));
    }

    /**
     * Create team
     */
    async userCreateTeam(requestParameters: UserCreateTeamRequest): Promise<Team> {
        const response = await this.userCreateTeamRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete an invite created earlier. You must be an administrator of the team to perform this action
     * Delete invite
     */
    async userDeleteInviteRaw(requestParameters: UserDeleteInviteRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling userDeleteInvite.');
        }

        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling userDeleteInvite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/user/teams/{teamId}/invites/{code}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))).replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete an invite created earlier. You must be an administrator of the team to perform this action
     * Delete invite
     */
    async userDeleteInvite(requestParameters: UserDeleteInviteRequest): Promise<object> {
        const response = await this.userDeleteInviteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Remove a member from the team. You must be an administrator to do this. You can\'t remove yourself from the team.
     * Remove member
     */
    async userDeleteMemberRaw(requestParameters: UserDeleteMemberRequest): Promise<runtime.ApiResponse<Member>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling userDeleteMember.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling userDeleteMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/user/teams/{teamId}/members/{userId}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberFromJSON(jsonValue));
    }

    /**
     * Remove a member from the team. You must be an administrator to do this. You can\'t remove yourself from the team.
     * Remove member
     */
    async userDeleteMember(requestParameters: UserDeleteMemberRequest): Promise<Member> {
        const response = await this.userDeleteMemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update the team. You must be an administrator of the team to edit it.
     * Remove team
     */
    async userDeleteTeamRaw(requestParameters: UserDeleteTeamRequest): Promise<runtime.ApiResponse<Team>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling userDeleteTeam.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/user/teams/{teamId}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamFromJSON(jsonValue));
    }

    /**
     * Update the team. You must be an administrator of the team to edit it.
     * Remove team
     */
    async userDeleteTeam(requestParameters: UserDeleteTeamRequest): Promise<Team> {
        const response = await this.userDeleteTeamRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update the team. You must be an administrator of the team to edit it.
     * Generate invite
     */
    async userGenerateInviteRaw(requestParameters: UserGenerateInviteRequest): Promise<runtime.ApiResponse<Invite>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling userGenerateInvite.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling userGenerateInvite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/user/teams/{teamId}/invites`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InviteRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InviteFromJSON(jsonValue));
    }

    /**
     * Update the team. You must be an administrator of the team to edit it.
     * Generate invite
     */
    async userGenerateInvite(requestParameters: UserGenerateInviteRequest): Promise<Invite> {
        const response = await this.userGenerateInviteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update the team. You must be an administrator of the team to edit it.
     * List invites
     */
    async userListInvitesRaw(requestParameters: UserListInvitesRequest): Promise<runtime.ApiResponse<InviteList>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling userListInvites.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/user/teams/{teamId}/invites`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InviteListFromJSON(jsonValue));
    }

    /**
     * Update the team. You must be an administrator of the team to edit it.
     * List invites
     */
    async userListInvites(requestParameters: UserListInvitesRequest): Promise<InviteList> {
        const response = await this.userListInvitesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update the team. You must be an administrator of the team to edit it.
     * List teams
     */
    async userListTeamsRaw(): Promise<runtime.ApiResponse<TeamList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/user/teams`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamListFromJSON(jsonValue));
    }

    /**
     * Update the team. You must be an administrator of the team to edit it.
     * List teams
     */
    async userListTeams(): Promise<TeamList> {
        const response = await this.userListTeamsRaw();
        return await response.value();
    }

    /**
     * Read a single invite from the team\'s set of non-redeemed invites.
     * Retrieve invite
     */
    async userRetrieveInviteRaw(requestParameters: UserRetrieveInviteRequest): Promise<runtime.ApiResponse<Invite>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling userRetrieveInvite.');
        }

        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling userRetrieveInvite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/user/teams/{teamId}/invites/{code}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))).replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InviteFromJSON(jsonValue));
    }

    /**
     * Read a single invite from the team\'s set of non-redeemed invites.
     * Retrieve invite
     */
    async userRetrieveInvite(requestParameters: UserRetrieveInviteRequest): Promise<Invite> {
        const response = await this.userRetrieveInviteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve member
     */
    async userRetrieveMemberRaw(requestParameters: UserRetrieveMemberRequest): Promise<runtime.ApiResponse<Member>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling userRetrieveMember.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling userRetrieveMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/user/teams/{teamId}/members/{userId}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberFromJSON(jsonValue));
    }

    /**
     * Retrieve member
     */
    async userRetrieveMember(requestParameters: UserRetrieveMemberRequest): Promise<Member> {
        const response = await this.userRetrieveMemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve team
     */
    async userRetrieveTeamRaw(requestParameters: UserRetrieveTeamRequest): Promise<runtime.ApiResponse<Team>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling userRetrieveTeam.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/user/teams/{teamId}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamFromJSON(jsonValue));
    }

    /**
     * Retrieve team
     */
    async userRetrieveTeam(requestParameters: UserRetrieveTeamRequest): Promise<Team> {
        const response = await this.userRetrieveTeamRaw(requestParameters);
        return await response.value();
    }

    /**
     * List members
     */
    async userRetrieveTeamMembersRaw(requestParameters: UserRetrieveTeamMembersRequest): Promise<runtime.ApiResponse<MemberList>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling userRetrieveTeamMembers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/user/teams/{teamId}/members`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberListFromJSON(jsonValue));
    }

    /**
     * List members
     */
    async userRetrieveTeamMembers(requestParameters: UserRetrieveTeamMembersRequest): Promise<MemberList> {
        const response = await this.userRetrieveTeamMembersRaw(requestParameters);
        return await response.value();
    }

    /**
     * You must be an administrator of the team to update member settings
     * Update member
     */
    async userUpdateMemberRaw(requestParameters: UserUpdateMemberRequest): Promise<runtime.ApiResponse<Member>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling userUpdateMember.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling userUpdateMember.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling userUpdateMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/user/teams/{teamId}/members/{userId}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: MemberToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberFromJSON(jsonValue));
    }

    /**
     * You must be an administrator of the team to update member settings
     * Update member
     */
    async userUpdateMember(requestParameters: UserUpdateMemberRequest): Promise<Member> {
        const response = await this.userUpdateMemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update the team. You must be an administrator of the team to edit it.
     * Update team
     */
    async userUpdateTeamRaw(requestParameters: UserUpdateTeamRequest): Promise<runtime.ApiResponse<Team>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling userUpdateTeam.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling userUpdateTeam.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Token"] = this.configuration.apiKey("X-API-Token"); // APIToken authentication
        }

        const response = await this.request({
            path: `/user/teams/{teamId}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TeamToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamFromJSON(jsonValue));
    }

    /**
     * Update the team. You must be an administrator of the team to edit it.
     * Update team
     */
    async userUpdateTeam(requestParameters: UserUpdateTeamRequest): Promise<Team> {
        const response = await this.userUpdateTeamRaw(requestParameters);
        return await response.value();
    }

}
